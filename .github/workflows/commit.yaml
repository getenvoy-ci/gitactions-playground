name: commit

on:
  push:
    branches:
    - master
    tags:
    - '**'
  pull_request:
    branches:
    - '**'

env:
  CARGO_TERM_COLOR: always

jobs:
  bin:
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout"
      uses: actions/checkout@v2

    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
    - name: Dump Env context
      env:
        ENV_CONTEXT: ${{ toJson(env) }}
      run: echo "$ENV_CONTEXT"
    - name: Dump job context
      env:
        JOB_CONTEXT: ${{ toJson(job) }}
      run: echo "$JOB_CONTEXT"
    - name: Dump steps context
      env:
        STEPS_CONTEXT: ${{ toJson(steps) }}
      run: echo "$STEPS_CONTEXT"
    - name: Dump runner context
      env:
        RUNNER_CONTEXT: ${{ toJson(runner) }}
      run: echo "$RUNNER_CONTEXT"
    - name: Dump strategy context
      env:
        STRATEGY_CONTEXT: ${{ toJson(strategy) }}
      run: echo "$STRATEGY_CONTEXT"
    - name: Dump matrix context
      env:
        MATRIX_CONTEXT: ${{ toJson(matrix) }}
      run: echo "$MATRIX_CONTEXT"

  lint:
    name: "Lint"
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout"
      uses: actions/checkout@v2

    - name: "Install Rust"
      run: |
        rustup update stable
        rustup default stable
        rustc -vV

    - name: "Check code format"
      run: cargo fmt --all -- --check

    - name: "Check code mistakes"
      run: cargo clippy --all -- -Dwarnings

  build:
    name: "Build"
    needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
    steps:
    - name: "Checkout"
      uses: actions/checkout@v2

    - name: "Install Rust"
      run: |
        rustup update ${{ matrix.rust }}

    - name: "Set default Rust toolchain"
      run: |
        rustup default ${{ matrix.rust }}
        rustc -vV

    - name: "Build"
      run: cargo build --workspace --verbose

  test:
    name: "Test"
    needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
    steps:
    - name: "Checkout"
      uses: actions/checkout@v2

    - name: "Install Rust"
      # apparently, `rustup update` regularly fails on Windows with:
      #   error: could not remove 'setup' file: 'C:\Users\runneradmin\.cargo\bin/rustup-init.exe'
      #   error: caused by: Access is denied. (os error 5)
      run: |
        rustup update ${{ matrix.rust }}

    - name: "Set default Rust toolchain"
      run: |
        rustup default ${{ matrix.rust }}
        rustc -vV

    - name: "Test"
      run: cargo test --workspace --verbose

  docs:
    name: "Docs"
    needs: lint
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout"
      uses: actions/checkout@v2

    - name: "Install Rust"
      run: |
        rustup update stable
        rustup default stable
        rustc -vV

    - name: "Build docs"
      run: cargo doc --workspace --no-deps

  publish:
    name: "Publish"
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    needs:
    - lint
    - build
    - test
    - docs
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout"
      uses: actions/checkout@v2

    - name: "Install Rust"
      run: |
        rustup update stable
        rustup default stable
        rustc -vV

    - name: "Check version"
      run: |
        let version=$(cargo metadata --format-version=1 --no-deps | jq -r '.packages[] | .version')
        let tag="${GITHUB_REF##*/}"
        if [[ "$version" != "$tag" ]]; then
          echo "Package version according to Cargo.toml ($version) is different from the Git tag ($tag). Looks like a bug :("
          exit 1
        fi

    - name: "Publish"
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
      run: |
        cargo publish
