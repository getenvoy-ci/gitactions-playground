name: commit

on:
  push:
    branches:
    - master
    tags:
    - '**'
  pull_request:
    branches:
    - '**'

env:
  CARGO_TERM_COLOR: always

jobs:
  skopeo:
    runs-on: ubuntu-20.04
    steps:
    - name: "Checkout"
      uses: actions/checkout@v2

    - name: Install skopeo
      run: |
        # see https://software.opensuse.org//download.html?project=devel%3Akubic%3Alibcontainers%3Astable&package=skopeo

        echo 'deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/ /' | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
        curl -fsSL https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable/xUbuntu_20.04/Release.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/devel_kubic_libcontainers_stable.gpg > /dev/null
        sudo apt update
        sudo apt install skopeo

    - name: Use skopeo
      run: |
        id
        skopeo inspect docker://ubuntu

  bin:
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout"
      uses: actions/checkout@v2

    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
    - name: Dump Env context
      env:
        ENV_CONTEXT: ${{ toJson(env) }}
      run: echo "$ENV_CONTEXT"
    - name: Dump job context
      env:
        JOB_CONTEXT: ${{ toJson(job) }}
      run: echo "$JOB_CONTEXT"
    - name: Dump steps context
      env:
        STEPS_CONTEXT: ${{ toJson(steps) }}
      run: echo "$STEPS_CONTEXT"
    - name: Dump runner context
      env:
        RUNNER_CONTEXT: ${{ toJson(runner) }}
      run: echo "$RUNNER_CONTEXT"
    - name: Dump strategy context
      env:
        STRATEGY_CONTEXT: ${{ toJson(strategy) }}
      run: echo "$STRATEGY_CONTEXT"
    - name: Dump matrix context
      env:
        MATRIX_CONTEXT: ${{ toJson(matrix) }}
      run: echo "$MATRIX_CONTEXT"

  lint:
    name: "Lint"
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout"
      uses: actions/checkout@v2

    - name: "Install Rust"
      run: |
        rustup update stable
        rustup default stable
        rustc -vV

    - name: "Check code format"
      run: cargo fmt --all -- --check

    - name: "Check code mistakes"
      run: cargo clippy --all -- -Dwarnings

  build:
    name: "Build"
    needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
    steps:
    - name: "Checkout"
      uses: actions/checkout@v2

    - name: "Install Rust"
      run: |
        rustup update ${{ matrix.rust }}

    - name: "Set default Rust toolchain"
      run: |
        rustup default ${{ matrix.rust }}
        rustc -vV

    - name: "Build"
      run: cargo build --workspace --verbose

  test:
    name: "Test"
    needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
    steps:
    - name: "Checkout"
      uses: actions/checkout@v2

    - name: "Install Rust"
      # apparently, `rustup update` regularly fails on Windows with:
      #   error: could not remove 'setup' file: 'C:\Users\runneradmin\.cargo\bin/rustup-init.exe'
      #   error: caused by: Access is denied. (os error 5)
      run: |
        rustup update ${{ matrix.rust }}

    - name: "Set default Rust toolchain"
      run: |
        rustup default ${{ matrix.rust }}
        rustc -vV

    - name: "Test"
      run: cargo test --workspace --verbose

  docs:
    name: "Docs"
    needs: lint
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout"
      uses: actions/checkout@v2

    - name: "Install Rust"
      run: |
        rustup update stable
        rustup default stable
        rustc -vV

    - name: "Build docs"
      run: cargo doc --workspace --no-deps

    - name: "Publish docs"
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
      run: |
        git fetch origin gh-pages                 # By default, 'actions/checkout' only fetches branch of the commit.
        git worktree add /tmp/rustdoc gh-pages    # Checkout 'gh-pages' branch into '/tmp/rustdoc'
        rm -rf /tmp/rustdoc/*                     # Remove all files (except for hidden files, such as .git directory)
        cp -rp target/doc/* /tmp/rustdoc/
        cd /tmp/rustdoc
        git add --all                             # This adds, modifies, and removes index entries to match the working tree.
        if ! git diff --cached --exit-code ; then # There might be no changes to commit
          GIT_AUTHOR_NAME="${{ github.event.head_commit.author.name }}" \
            GIT_AUTHOR_EMAIL="${{ github.event.head_commit.author.email }}" \
            GIT_AUTHOR_DATE="${{ github.event.head_commit.timestamp }}" \
            GIT_COMMITTER_NAME="${{ github.event.head_commit.committer.name }}" \
            GIT_COMMITTER_EMAIL="${{ github.event.head_commit.committer.email }}" \
            GIT_COMMITTER_DATE="${{ github.event.head_commit.timestamp }}" \
            git commit -m "${{ github.event.head_commit.message }}"
          git push origin gh-pages
        else
          echo "There are no changes to GitHub Pages."
        fi
        git worktree remove --force /tmp/rustdoc  # Remove the working tree.

  publish:
    name: "Publish"
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    needs:
    - lint
    - build
    - test
    - docs
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout"
      uses: actions/checkout@v2

    - name: "Install Rust"
      run: |
        rustup update stable
        rustup default stable
        rustc -vV

    - name: "Check version"
      run: |
        version="$(cargo metadata --format-version=1 --no-deps | jq -r '.packages[] | .version')"
        tag="${GITHUB_REF##*/}"
        if [[ "$version" != "$tag" ]]; then
          echo "Package version according to Cargo.toml ($version) is different from the Git tag ($tag). Did you forget to bump the version in Cargo.toml ?"
          exit 1
        fi

    - name: "Publish"
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
      run: |
        cargo publish
